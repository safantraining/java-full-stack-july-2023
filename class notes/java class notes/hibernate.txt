

ORM:-
-------
   ORM framework.

   Object Relation Mapping

jdbc:-
-------
   java code + sql queries
                (insert into emp values())

    --> try & catch

Hibernate framework:-
---------------------
   It is a orm framework, which maps java objects to the database table.

   Using Hibernate , we can connect with database easily, and perform the database opertaion like(insert, update, delete,..)
   without writing sql queries.  (Hibernate will the sql queries for us) 


programming languages:-
----------------------

html, css, js,bootstarp,   ----->  (to desigh userinterface)

java, python,               ----> (backend server side programming)

sql,no sql                  ---> database operation   ( database software like mysql, oracle, etc)

json, xml,..                ---> server to server communication (message exchange between server)


maven project:-
------------------
   we can easily manage the project dependencies, 
     (easily add the library , and update the library version)

    pom.xml -->  ( inside this file only , we will write the dependency )
    -------- 


hibernate demo 1:-
------------------

 steps:-
 --------
 1.  file --> new --> maven project ---> (check box tick) create simple project -->next --> finish -->


2. fill the pom.file:-
 ------------------------
   <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.excelr</groupId>
  <artifactId>hibernateinsertdemo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
  <properties>
	  <maven.compiler.source>1.8</maven.compiler.source>
	  <maven.compiler.target>1.8</maven.compiler.target>
 </properties>
  
  <dependencies>
	  
	  <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.4.32.Final</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
<dependency>
    <groupId>com.mysql</groupId>
    <artifactId>mysql-connector-j</artifactId>
    <version>8.0.31</version>
</dependency>
</dependencies>
  
  
</project>
      


3. create the persitance class:-
---------------------------------
   It is a simple java class, which has private variable , 
    setter and getter , construtor.

    @Entity    ----> entity class, which will have data base relationship
    @Id       -----> primary key


  package com.excelr.persistance;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Employee {

	@Id
	private int id;
	private String name;
	private String dept;
	private int age;
	private int salary;
	
	
	
	public Employee() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
	public Employee(int id, String name, String dept, int age, int salary) {
		super();
		this.id = id;
		this.name = name;
		this.dept = dept;
		this.age = age;
		this.salary = salary;
	}


	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDept() {
		return dept;
	}
	public void setDept(String dept) {
		this.dept = dept;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	
	
	
}



4 . hibernate configuration file:-
--------------------------------------
   (it is like a setting file)


  inside src/main/resource--> 
            hibernate.cfg.xml    ---> we will write the congiguration details
    
     3 things to write:-
     --------------------
       a. connection details   (database connection details , url,username, password,)
       b. hibernate properties   ()
       c. mapping details      (persistance class details)



============================================================================================

insert code:-
---------------
Transaction transaction =   session.beginTransaction();
Employee employee = new Employee(4, "suraj", "hr", 32, 64000);
session.save(employee);
transaction.commit();


reterive:-
-----------
 Employee emp =   session.load(Employee.class, 4);
System.out.println(emp);


delete:-
----------
  // loading from database
    // Employee emp =  session.load(Employee.class, 3);
       Employee emp = new Employee(1, "mohit", "developer", 25, 90000);
     
   Transaction transaction =  session.beginTransaction();
     session.delete(emp);
     transaction.commit();
     System.out.println("record deleted");
       




update:-
----------

    // loading from database
    Employee emp =  session.load(Employee.class, 3);
     
   Transaction transaction =  session.beginTransaction();
   emp.setSalary(70000);
   emp.setAge(35);
   emp.setDept("manager");
   session.update(emp);
    
     transaction.commit();
     System.out.println("record updated");


===================================================================================================
HQL:-
----------
   Hibernate Query Language, Which works on java objects.

SQL:-
-------
   Structured Query lanaguage, which works rdbms.


HQL is the own query language of hibernate and it is used to perform bulk operations on hibernate programs
An object oriented form of SQL is called HQL.

===============================================================


Hibernate Object life cycle:-
-------------------------------
 persistance class life cycle:-
 ------------------------------
    1.transient state.
    2.persistance state.
    3. detached state.
       
   transient state:-
   -------------------
   1. when ever a java object is created , it is in
      transient state.

        Employee employee = new Employee();
       employee.setName(name);
       employee.setDept(dept);
       employee.setSalary(salary);
       employee.setAge(age);

    It does not represent a row in the database table.
 
   2. persistance state:-
   --------------------------
      by using session object, if we call
        session.save(employee);
            then it will represent a row in the database table.

  3. detached:-
  --------------
     session.close();
         when we call session.close(), It will go to detached state,

         previously It had the connection, 
  

====================================================================

database relationship:-
--------------------------

employee    1: 1  empdetails

Employee:-
----------
 id    name   dept  salary  



 EmployeeDetails
 ----------------
 edid    pandetails   adhardetails    bankaccount   pfdetals



 1:1
 1:m   
 m:1
 m:m


 1:1:-
 ----------
     employee & EmployeeDetails


 1:m
 ------
  1 dept  many employee    
     100 employees:-
     ----------------
     20 hr
     50 developer
     30 tester



m :1 
------
   many employee 1 dept


m:m:-
--------
  many customer many products


cust1   product1
cust2   product2
.

===========================================================================================